#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ThisIsFine.
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π –¥–µ–º–æ–Ω, –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
"""

import os
import asyncio
import logging
from datetime import datetime, timezone, timedelta
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from dotenv import load_dotenv

load_dotenv("tif.env")

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π env –æ—Ç Flask
import tempfile
TMP_ENV_PATH = os.path.join(tempfile.gettempdir(), 'tif_notifier_tmp.env')
if os.path.exists(TMP_ENV_PATH):
    load_dotenv(TMP_ENV_PATH, override=True)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {TMP_ENV_PATH}")
else:
    print("‚ÑπÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é tif.env")


task_message_ids = {}
# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
THISISFINE_URL = os.getenv("THISISFINE_URL", "http://localhost:5000")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warned_tasks = set()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏, —Ç.–∫. requests –±–ª–æ–∫–∏—Ä—É–µ—Ç) ---
def get_all_tasks():
    try:
        res = requests.get(
            f"{THISISFINE_URL}/tasks?due_from=1970-01-01T00:00:00Z&due_to=2038-01-19T03:14:07Z",
            timeout=10
        )
        return res.json() if res.status_code == 200 else []
    except Exception as e:
        logger.error(f"–°–±–æ–π –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ThisIsFine: {e}")
        return []

def update_task_status(task_id: int, status: str):
    try:
        requests.put(f"{THISISFINE_URL}/tasks/{task_id}", json={"status": status}, timeout=10)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}: {e}")

def postpone_task(task_id: int, hours: int = 1):
    """–û—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç planned_at –Ω–∞ N —á–∞—Å–æ–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç warned_tasks –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏."""
    global warned_tasks
    print("postpone", task_id)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
        task_res = requests.get(f"{THISISFINE_URL}/tasks/{task_id}", timeout=10)
        print(task_res)
        if task_res.status_code != 200:
            return
        task = task_res.json()
        uuid = task.get("uuid")
        if not uuid:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º planned_at
        now = datetime.now(timezone.utc)
        new_planned = now + timedelta(hours=hours)

        # –§–æ—Ä–º–∏—Ä—É–µ–º deadlines –∫–∞–∫ –æ–±—ä–µ–∫—Ç (–≤–∞–∂–Ω–æ!)
        deadlines = task.get("deadlines", {})
        deadlines["planned_at"] = new_planned.isoformat().replace("+00:00", "Z")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û deadlines –∏ status (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        update_data = {
            "deadlines": deadlines
        }
        res = requests.put(
            f"{THISISFINE_URL}/tasks/{task_id}",
            json=update_data,
            timeout=10
        )
        if res.status_code == 200:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            warned_tasks = {k for k in warned_tasks if not k.startswith(f"{uuid}_")}
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–ª–æ–∂–µ–Ω–∞ –¥–æ {new_planned}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É {task_id}: {res.status_code} {res.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ–º –∂–µ loop, —á—Ç–æ –∏ –±–æ—Ç) ---
async def check_and_notify(context: ContextTypes.DEFAULT_TYPE):
    global warned_tasks
    bot = context.bot
    chat_id = CHAT_ID
    if not chat_id:
        logger.warning("CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return

    now = datetime.now(timezone.utc)
    tasks = get_all_tasks()
    current_warned = set(warned_tasks)

    for task in tasks:
        uuid = task.get("uuid")
        if not uuid:
            continue

        status = task.get("status")
        deadlines = task.get("deadlines", {})
        duration = task.get("duration_seconds", 0)
        task_id = task.get("id")
        key_base = f"{uuid}_"

        # 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ planned_at –∑–∞–¥–∞–Ω)
        # 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
        if status == "planned" and deadlines.get("planned_at"):
            planned_at = datetime.fromisoformat(deadlines["planned_at"].replace("Z", "+00:00"))
            if planned_at.tzinfo is None:
                planned_at = planned_at.replace(tzinfo=timezone.utc)
            if now >= planned_at:
                warn_key = f"{uuid}_planned"
                if warn_key not in warned_tasks:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –û–î–ò–ù –†–ê–ó
                    btns = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data=f"start_{task_id}")],
                        [InlineKeyboardButton("üïó –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1—á", callback_data=f"postpone_{task_id}")],
                        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_{task_id}")]
                    ])

                    msg = await bot.send_message(chat_id=chat_id, text=f"üïó –ó–∞–¥–∞—á–∞ ¬´{task['title']}¬ª –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å!",
                                           reply_markup=btns)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                    if uuid not in task_message_ids:
                        task_message_ids[uuid] = []
                    task_message_ids[uuid].append(msg.message_id)
                    current_warned.add(warn_key)

        # 2. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—Ä–µ–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ duration > 0)
        # 2. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—Ä–µ–∑
        if duration > 0 and status in ("planned", "inProgress") and deadlines.get("due_at"):
            due_at = datetime.fromisoformat(deadlines["due_at"].replace("Z", "+00:00"))
            if due_at.tzinfo is None:
                due_at = due_at.replace(tzinfo=timezone.utc)
            warn_time = due_at - timedelta(seconds=duration)
            if now >= warn_time:
                warn_key = f"{uuid}_due_warn"
                if warn_key not in warned_tasks:
                    btns = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data=f"start_{task_id}")],
                        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_{task_id}")]
                    ])
                    msg = await bot.send_message(chat_id=chat_id,
                                           text=f"‚ö†Ô∏è –£ –∑–∞–¥–∞—á–∏ ¬´{task['title']}¬ª –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏!",
                                           reply_markup=btns)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                    if uuid not in task_message_ids:
                        task_message_ids[uuid] = []
                    task_message_ids[uuid].append(msg.message_id)
                    current_warned.add(warn_key)

        # 3. –ü—Ä–æ—Å—Ä–æ—á–∫–∞: –µ—Å–ª–∏ due_at –Ω–∞—Å—Ç—É–ø–∏–ª, –∞ –∑–∞–¥–∞—á–∞ –Ω–µ done –∏ –Ω–µ failed
        if status not in ("done", "failed") and deadlines.get("due_at"):
            due_at = datetime.fromisoformat(deadlines["due_at"].replace("Z", "+00:00"))
            if due_at.tzinfo is None:
                due_at = due_at.replace(tzinfo=timezone.utc)
            if now >= due_at and status != "overdue":
                update_task_status(task_id, "overdue")
                btns = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data=f"start_{task_id}")],
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_{task_id}")]
                ])
                msg = await bot.send_message(chat_id=chat_id, text=f"üî• –ó–∞–¥–∞—á–∞ ¬´{task['title']}¬ª –ü–†–û–°–†–û–ß–ï–ù–ê!",reply_markup=btns)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                if uuid not in task_message_ids:
                    task_message_ids[uuid] = []
                task_message_ids[uuid].append(msg.message_id)

        # 4. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –ª—å–≥–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ duration > 0 –∏ –µ—Å—Ç—å grace_end)
        # 4. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –ª—å–≥–æ—Ç—ã
        if duration > 0 and deadlines.get("grace_end") and status not in ("done", "failed"):
            grace_end = datetime.fromisoformat(deadlines["grace_end"].replace("Z", "+00:00"))
            if grace_end.tzinfo is None:
                grace_end = grace_end.replace(tzinfo=timezone.utc)
            warn_time = grace_end - timedelta(seconds=duration)
            if now >= warn_time:
                warn_key = f"{uuid}_grace_warn"
                if warn_key not in warned_tasks:
                    btns = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data=f"start_{task_id}")],
                        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_{task_id}")]
                    ])
                    msg = await bot.send_message(chat_id=chat_id, text=f"üö® –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –¥–ª—è ¬´{task['title']}¬ª!",reply_markup=btns)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                    if uuid not in task_message_ids:
                        task_message_ids[uuid] = []
                    task_message_ids[uuid].append(msg.message_id)
                    current_warned.add(warn_key)

        # 5. –û–∫–æ–Ω—á–∞–Ω–∏–µ –ª—å–≥–æ—Ç—ã ‚Üí –ø–µ—Ä–µ–≤–æ–¥ –≤ failed (–µ—Å–ª–∏ –Ω–µ done)
        if deadlines.get("grace_end") and status not in ("done", "failed"):
            grace_end = datetime.fromisoformat(deadlines["grace_end"].replace("Z", "+00:00"))
            if grace_end.tzinfo is None:
                grace_end = grace_end.replace(tzinfo=timezone.utc)
            if now >= grace_end:
                update_task_status(task_id, "failed")
                btns = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_{task_id}")]
                ])
                msg = await bot.send_message(chat_id=chat_id,
                                       text=f"üíÄ –°—Ä–æ–∫ –¥–ª—è ¬´{task['title']}¬ª –∏—Å—Ç—ë–∫. –ó–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ FAILED.",reply_markup=btns)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                if uuid not in task_message_ids:
                    task_message_ids[uuid] = []
                task_message_ids[uuid].append(msg.message_id)

    warned_tasks = current_warned

async def clear_task_messages(bot, chat_id, uuid):
    """–£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞—á–µ."""
    if uuid not in task_message_ids:
        return
    for msg_id in task_message_ids[uuid]:
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=msg_id,
                reply_markup=None  # ‚Üê —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    del task_message_ids[uuid]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    bot = context.bot
    chat_id = query.message.chat_id

    if data.startswith("start_"):
        task_id = int(data.split("_")[1])
        update_task_status(task_id, "inProgress")
        await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ.")
    elif data.startswith("postpone_"):
        task_id = int(data.split("_")[1])
        postpone_task(task_id, hours=1)
        await query.edit_message_text("üïó –ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ 1 —á–∞—Å.")
    elif data.startswith("done_"):
        task_id = int(data.split("_")[1])
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –≤–∑—è—Ç—å uuid
        task_res = requests.get(f"{THISISFINE_URL}/tasks/{task_id}", timeout=10)
        if task_res.status_code == 200:
            task = task_res.json()
            uuid = task.get("uuid")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            update_task_status(task_id, "done")
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if uuid:
                await clear_task_messages(bot, chat_id, uuid)
            await query.edit_message_text("üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É.")

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ThisIsFine –∞–∫—Ç–∏–≤–µ–Ω.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    if not TELEGRAM_BOT_TOKEN:
        raise ValueError("–£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ job queue
    job_queue = app.job_queue
    job_queue.run_repeating(check_and_notify, interval=60, first=10)

    logger.info("–ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()