# tag_suggester.py
import re
import math
from collections import defaultdict, Counter
from typing import List, Dict, Set, Tuple
import pymorphy2

# === 1. Генерация обучающего набора (реальные данные можно заменить позже) ===
def generate_sample_tasks() -> List[Dict]:
    return [
        # === Быт и дом ===
        {"text": "Вынести мусор в контейнер", "tags": ["дом", "уборка"]},
        {"text": "Постирать бельё и развешать сушиться", "tags": ["дом", "стирка"]},
        {"text": "Поменять постельное бельё", "tags": ["дом", "гигиена"]},
        {"text": "Протереть пыль со всех поверхностей", "tags": ["уборка", "дом"]},
        {"text": "Проверить срок годности продуктов в холодильнике", "tags": ["еда", "дом"]},
        {"text": "Разморозить морозильную камеру", "tags": ["дом", "техника"]},
        {"text": "Заменить лампочку в коридоре", "tags": ["дом", "ремонт"]},
        {"text": "Починить скрипящую дверь", "tags": ["ремонт", "дом"]},
        {"text": "Организовать хранение инструментов в гараже", "tags": ["организация", "дом"]},
        {"text": "Проверить герметичность окон перед зимой", "tags": ["дом", "подготовка"]},

        # === Здоровье и тело ===
        {"text": "Измерить артериальное давление", "tags": ["здоровье", "контроль"]},
        {"text": "Принять витамины утром", "tags": ["здоровье", "рутинa"]},
        {"text": "Сделать растяжку после тренировки", "tags": ["спорт", "здоровье"]},
        {"text": "Записаться на МРТ по направлению врача", "tags": ["здоровье", "врач"]},
        {"text": "Провести детокс-день на воде и овощах", "tags": ["здоровье", "питание"]},
        {"text": "Проверить уровень сахара в крови", "tags": ["здоровье", "контроль"]},
        {"text": "Сделать массаж шеи и плеч", "tags": ["здоровье", "релакс"]},
        {"text": "Пройти профилактический осмотр у терапевта", "tags": ["здоровье", "врач"]},
        {"text": "Поликлиника", "tags": ["здоровье", "врач"]},

        # === Работа и учёба ===
        {"text": "Провести код-ревью pull request от коллеги", "tags": ["работа", "программирование"]},
        {"text": "Подготовить отчёт по метрикам за квартал", "tags": ["работа", "аналитика"]},
        {"text": "Изучить документацию по новому API", "tags": ["учёба", "программирование"]},
        {"text": "Провести митинг с командой по спринту", "tags": ["работа", "коммуникация"]},
        {"text": "Написать unit-тесты для нового модуля", "tags": ["работа", "программирование"]},
        {"text": "Обновить требования к ТЗ после встречи с заказчиком", "tags": ["работа", "документация"]},
        {"text": "Пройти онлайн-курс по Docker и Kubernetes", "tags": ["учёба", "техника"]},
        {"text": "Подготовить демо-версию продукта для инвесторов", "tags": ["работа", "презентация"]},

        # === Техника и цифровой быт ===
        {"text": "Обновить систему на сервере", "tags": ["техника", "обслуживание"]},
        {"text": "Настроить автоматическое резервное копирование базы данных", "tags": ["безопасность", "резервная_копия"]},
        {"text": "Проверить логи приложения на ошибки", "tags": ["техника", "диагностика"]},
        {"text": "Развернуть новый контейнер в Docker", "tags": ["техника", "обслуживание"]},
        {"text": "Настроить мониторинг через Prometheus и Grafana", "tags": ["техника", "мониторинг"]},
        {"text": "Зашифровать архив с конфиденциальными данными", "tags": ["безопасность", "техника"]},
        {"text": "Оптимизировать SQL-запросы в базе данных", "tags": ["техника", "оптимизация"]},
        {"text": "Проверить SSL-сертификат на веб-сервере", "tags": ["безопасность", "техника"]},

        # === Финансы ===
        {"text": "Проверить баланс на банковской карте", "tags": ["финансы", "контроль"]},
        {"text": "Оплатить подписку на облачное хранилище", "tags": ["финансы", "техника"]},
        {"text": "Составить бюджет на следующий месяц", "tags": ["финансы", "планирование"]},
        {"text": "Перевести деньги родителям", "tags": ["финансы", "семья"]},
        {"text": "Проверить налоговые вычеты за год", "tags": ["финансы", "документы"]},
        {"text": "Инвестировать часть средств в ETF", "tags": ["финансы", "инвестиции"]},

        # === Творчество и хобби ===
        {"text": "Написать черновик рассказа", "tags": ["творчество", "письмо"]},
        {"text": "Нарисовать эскиз персонажа для игры", "tags": ["творчество", "искусство"]},
        {"text": "Собрать модель из пластика", "tags": ["хобби", "моделирование"]},
        {"text": "Настроить гитару перед репетицией", "tags": ["музыка", "подготовка"]},
        {"text": "Записать подкаст о технологиях будущего", "tags": ["творчество", "медиа"]},
        {"text": "Отредактировать фотографии с последней прогулки", "tags": ["творчество", "фото"]},

        # === Социальное и общение ===
        {"text": "Написать поздравление другу с днём рождения", "tags": ["социальное", "поздравление"]},
        {"text": "Организовать встречу с друзьями в пятницу", "tags": ["социальное", "планирование"]},
        {"text": "Ответить на сообщения в мессенджере", "tags": ["коммуникация", "социальное"]},
        {"text": "Помочь коллеге с настройкой окружения", "tags": ["работа", "помощь"]},

        # === Путешествия и транспорт ===
        {"text": "Проверить состояние шин перед поездкой", "tags": ["транспорт", "подготовка"]},
        {"text": "Купить билеты на поезд в другой город", "tags": ["путешествие", "планирование"]},
        {"text": "Забронировать отель на выходные", "tags": ["путешествие", "бронирование"]},
        {"text": "Проверить наличие визы перед вылетом", "tags": ["путешествие", "документы"]},

        # === Питание и кулинария ===
        {"text": "Сварить кофе утром", "tags": ["еда", "рутинa"]},
        {"text": "Приготовить овощной салат на ужин", "tags": ["готовка", "еда"]},
        {"text": "Замариновать мясо для шашлыка", "tags": ["готовка", "еда"]},
        {"text": "Испечь пирог с яблоками", "tags": ["готовка", "выпечка"]},

        # === Духовное и ритуальное (в духе Культа Механикус) ===
        {"text": "Провести технолитанию перед серверной", "tags": ["ритуал", "техника"]},
        {"text": "Освятить новый SSD перед установкой", "tags": ["ритуал", "техника"]},
        {"text": "Прошептать молитву Омниссии перед деплоем", "tags": ["ритуал", "работа"]},
        {"text": "Проверить целостность священных схем в репозитории", "tags": ["техника", "контроль"]},

        # === Прочие ===
        {"text": "Составить список покупок на неделю", "tags": ["планирование", "покупки"]},
        {"text": "Отсортировать старые фотографии по годам", "tags": ["организация", "архив"]},
        {"text": "Выбросить просроченные лекарства", "tags": ["дом", "здоровье"]},
        {"text": "Проверить наличие запасных предохранителей", "tags": ["дом", "техника"]},
        {"text": "Обновить пароли в менеджере паролей", "tags": ["безопасность", "техника"]},
        {"text": "Сделать скриншот ошибки и отправить разработчикам", "tags": ["техника", "диагностика"]},
        {"text": "Проверить обновления в Manjaro", "tags": ["техника", "обслуживание"]},
        {"text": "Перезапустить PostgreSQL после обновления", "tags": ["техника", "обслуживание"]},
        {"text": "Проверить логи Telegram-бота на ошибки", "tags": ["техника", "диагностика"]},
        {"text": "Обновить зависимости в requirements.txt", "tags": ["программирование", "техника"]},
        {"text": "Настроить CORS для Flask-микросервиса", "tags": ["программирование", "техника"]},
        {"text": "Проверить работоспособность Docker-контейнеров", "tags": ["техника", "диагностика"]},
        {"text": "Оптимизировать размер образа контейнера", "tags": ["техника", "оптимизация"]},
        {"text": "Настроить health-check для микросервиса", "tags": ["техника", "мониторинг"]},
        {"text": "Проверить подключение к PostgreSQL из Flask", "tags": ["техника", "диагностика"]},
        {"text": "Создать резервную копию базы данных перед миграцией", "tags": ["безопасность", "резервная_копия"]},
        {"text": "Провести нагрузочное тестирование API", "tags": ["техника", "тестирование"]},
        {"text": "Настроить логирование через syslog", "tags": ["техника", "мониторинг"]},
        {"text": "Проверить права доступа к файлам в контейнере", "tags": ["безопасность", "техника"]},
        {"text": "Обновить сертификаты Let's Encrypt", "tags": ["безопасность", "техника"]},

        # === Дублирующие, но с вариациями (для robustness) ===
        {"text": "Купить хлеб и молоко в супермаркете", "tags": ["покупки", "еда"]},
        {"text": "Оплатить счета за воду и газ", "tags": ["финансы", "комуналка"]},
        {"text": "Позвонить бабушке и узнать, как она себя чувствует", "tags": ["семья", "звонок"]},
        {"text": "Пробежать 3 км по набережной", "tags": ["спорт", "здоровье"]},
        {"text": "Прочитать статью про нейросети", "tags": ["учёба", "технологии"]},
        {"text": "Заменить смеситель на кухне", "tags": ["ремонт", "дом"]},
        {"text": "Подготовить слайды к докладу", "tags": ["работа", "презентация"]},
        {"text": "Сделать бэкап фотографий на NAS", "tags": ["безопасность", "резервная_копия"]},
        {"text": "Приготовить борщ на ужин", "tags": ["готовка", "еда"]},
        {"text": "Записаться на приём к окулисту", "tags": ["здоровье", "врач"]},
        {"text": "Выгулять соседскую собаку", "tags": ["животные", "помощь"]},
        {"text": "Обновить BIOS на материнской плате", "tags": ["техника", "обслуживание"]},
        {"text": "Написать финальную версию отчёта", "tags": ["работа", "дедлайн"]},
        {"text": "Полить комнатные растения", "tags": ["дом", "растения"]},
        {"text": "Посмотреть фильм в одиночестве", "tags": ["отдых", "развлечения"]},
        {"text": "Очистить временные файлы в /tmp", "tags": ["техника", "очистка"]},
        {"text": "Сделать утреннюю йогу", "tags": ["здоровье", "спорт"]},
        {"text": "Ответить на письмо от HR", "tags": ["работа", "коммуникация"]},
        {"text": "Собрать чемодан к отъезду", "tags": ["путешествие", "подготовка"]},
        {"text": "Помыть окна в квартире", "tags": ["уборка", "дом"]}
    ]

# === Стоп-слова ===
RUSSIAN_STOPWORDS = {
    'и', 'в', 'во', 'не', 'что', 'он', 'на', 'я', 'с', 'со', 'как', 'а', 'то',
    'все', 'она', 'так', 'его', 'но', 'да', 'ты', 'к', 'у', 'же', 'вы', 'за',
    'бы', 'по', 'только', 'ее', 'мне', 'было', 'вот', 'от', 'меня', 'еще',
    'нет', 'о', 'из', 'ему', 'теперь', 'когда', 'даже', 'ну', 'вдруг', 'ли',
    'если', 'уже', 'или', 'ни', 'быть', 'был', 'него', 'до', 'вас', 'нибудь',
    'опять', 'уж', 'вам', 'сказал', 'ведь', 'там', 'потом', 'себя', 'ничего',
    'ей', 'может', 'они', 'тут', 'где', 'есть', 'надо', 'ней', 'для', 'мы',
    'тебя', 'их', 'чем', 'была', 'сам', 'чтоб', 'без', 'будто', 'человек',
    'чего', 'раз', 'тоже', 'себе', 'под', 'жизнь', 'будет', 'ж', 'тогда',
    'кто', 'этот', 'говорил', 'того', 'потому', 'этого', 'какой', 'совсем',
    'ним', 'здесь', 'этом', 'один', 'почти', 'мой', 'тем', 'чтобы', 'нее',
    'кажется', 'сейчас', 'были', 'куда', 'зачем', 'сказать', 'всех', 'никогда',
    'сегодня', 'можно', 'при', 'наконец', 'два', 'об', 'другой', 'хоть',
    'после', 'над', 'больше', 'тот', 'через', 'эти', 'нас', 'про', 'всего',
    'них', 'какая', 'много', 'разве', 'сказала', 'три', 'эту', 'моя', 'впрочем',
    'хорошо', 'свою', 'этой', 'перед', 'иногда', 'лучше', 'чуть', 'том', 'нельзя',
    'такой', 'им', 'более', 'всегда', 'конечно', 'всю', 'между'
}

_morph = pymorphy2.MorphAnalyzer()

def preprocess_text(text: str) -> List[str]:
    """Возвращает список лемм (не строку!), без стоп-слов."""
    text = re.sub(r'[^а-я\s]', ' ', text.lower())
    words = text.split()
    lemmas = []
    for word in words:
        if len(word) < 2 or word in RUSSIAN_STOPWORDS:
            continue
        parsed = _morph.parse(word)[0]
        lemmas.append(parsed.normal_form)
    return lemmas


def extract_ngrams(tokens: List[str], n: int) -> List[str]:
    if n == 1:
        return tokens
    return [' '.join(tokens[i:i + n]) for i in range(len(tokens) - n + 1)]


class TagSuggester:
    def __init__(self, tasks: List[Dict] = None):
        self.tasks = tasks + generate_sample_tasks()
        self.all_tags: Set[str] = set()
        self.vocab: Dict[str, int] = {}  # term -> index
        self.idf: Dict[str, float] = {}  # term -> IDF
        self.task_tfidf: List[Dict[int, float]]  # список разрежённых векторов (индекс -> вес)
        self._fit()

    def _fit(self):
        # Собираем все теги
        self.all_tags.clear()
        for task in self.tasks:
            self.all_tags.update(task["tags"])

        # Предобрабатываем все тексты
        processed_docs = [preprocess_text(task["text"]) for task in self.tasks]

        # Генерируем все униграммы и биграммы
        all_ngrams = []
        for tokens in processed_docs:
            grams = extract_ngrams(tokens, 1) + extract_ngrams(tokens, 2)
            all_ngrams.append(grams)

        # Строим словарь
        term_freq_global = defaultdict(int)
        for grams in all_ngrams:
            for term in set(grams):  # уникальные термины в документе
                term_freq_global[term] += 1

        N = len(self.tasks)
        self.vocab = {term: idx for idx, term in enumerate(term_freq_global.keys())}
        self.idf = {term: math.log(N / term_freq_global[term]) for term in term_freq_global}

        # Считаем TF-IDF для каждой задачи
        self.task_tfidf = []
        for grams in all_ngrams:
            tf = Counter(grams)
            vec = {}
            for term, freq in tf.items():
                if term in self.vocab:
                    tf_norm = freq / len(grams) if grams else 0
                    weight = tf_norm * self.idf[term]
                    vec[self.vocab[term]] = weight
            self.task_tfidf.append(vec)

    def _cosine_similarity(self, vec_a: Dict[int, float], vec_b: Dict[int, float]) -> float:
        # Скалярное произведение
        dot = sum(vec_a[k] * vec_b.get(k, 0.0) for k in vec_a)
        norm_a = math.sqrt(sum(v * v for v in vec_a.values()))
        norm_b = math.sqrt(sum(v * v for v in vec_b.values()))
        if norm_a == 0 or norm_b == 0:
            return 0.0
        return dot / (norm_a * norm_b)

    def suggest_tags(self, query: str, top_k_tags: int = 3) -> List[str]:
        if not query.strip():
            return []

        # Обрабатываем запрос
        tokens = preprocess_text(query)
        if not tokens:
            return []

        grams = extract_ngrams(tokens, 1) + extract_ngrams(tokens, 2)
        tf = Counter(grams)
        query_vec = {}
        for term, freq in tf.items():
            if term in self.vocab:
                tf_norm = freq / len(grams)
                weight = tf_norm * self.idf[term]
                query_vec[self.vocab[term]] = weight

        if not query_vec:
            return []

        # Считаем схожесть со всеми задачами
        similarities = []
        for idx, task_vec in enumerate(self.task_tfidf):
            sim = self._cosine_similarity(query_vec, task_vec)
            similarities.append((sim, idx))

        # Берём 5 ближайших (по убыванию схожести)
        similarities.sort(reverse=True)
        top_neighbors = similarities[:5]

        # Собираем теги с весами
        tag_scores = defaultdict(float)
        for sim, idx in top_neighbors:
            if sim <= 0:
                continue
            weight = sim  # можно оставить как есть (косинус уже нормирован)
            for tag in self.tasks[idx]["tags"]:
                tag_scores[tag] += weight

        # Сортируем и возвращаем
        sorted_tags = sorted(tag_scores.items(), key=lambda x: x[1], reverse=True)
        return [tag for tag, _ in sorted_tags[:top_k_tags]]

    def add_task(self, text: str, tags: List[str]):
        self.tasks.append({"text": text, "tags": tags})
        self._fit()

# === 4. Демонстрация работы ===
if __name__ == "__main__":
    timestamp = time.time()
    suggester = TagSuggester()
    print(time.time() - timestamp)
    test_queries = [
        "Сделать уборку в комнате",
        "Написать код для нового микросервиса",
        "Сходить в поликлинику",
        "Приготовить ужин из пасты",
        "Настроить роутер после сбоя"
    ]

    print("🔍 Автоподбор тегов (TF-IDF + k-NN)\n")
    for q in test_queries:
        tags = suggester.suggest_tags(q)
        print(f"Задача: {q}")
        print(f"Теги:   {', '.join(tags)}\n")